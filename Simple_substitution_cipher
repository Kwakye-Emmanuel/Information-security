# user-defined functions
# SSC: simple substitution cipher
# encryption
def SSC_encryption(plaintext, key, alphabet):

	ciphertext = ""
	# key mapping: original order [A, B, C], permutation [C, B, A] (A, C), (B, B), (C, A)
	# hint: 'dict', 'zip' functions

	# key mapping
	key_mapping = dict(zip(alphabet, key))
  # Construct keyMap_enc
	keyMap_enc = ''.join([key_mapping[char] for char in alphabet])

	# DEBUG
	print('[DEBUG] encryption key mapping: ', keyMap_enc)
	print('')
  # Encrypt each character in the plaintext
	for char in plaintext:
		# If the character is in the alphabet, replace it according to the key mapping
		if char in alphabet:
			ciphertext += key_mapping[char]
		else:
			# If the character is not in the alphabet, keep it unchanged
			ciphertext += char


	return ciphertext

plaintext = "HELLO PYTHONISTA!"
key = "CBACDEFGHIJKLMNOPQRSTUVWXYZ"  # Key based on permutation [C, B, A]
alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"


encrypted_text = SSC_encryption(plaintext, key, alphabet)
print("Encrypted text:", encrypted_text)


## TASK 2 ## 
# decryption
def SSC_decryption(ciphertext, key, alphabet):
	plaintext = ""

  # Create key mapping dictionary
	key_mapping = dict(zip(key, alphabet))

	decryption_mapping = {value: key for key, value in key_mapping.items()}

	# hint: reverse key mapping
	keyMap_dec = ''.join([decryption_mapping[char] if char in decryption_mapping else char for char in alphabet])

	# Decrypt each character in the ciphertext


	# DEBUG
	print('[DEBUG] decryption key mapping: ', keyMap_dec)
	print('')
  # Decrypt each character in the ciphertext
	for char in ciphertext:
		if char in decryption_mapping:
			plaintext += decryption_mapping[char]
		else:
			# If the character is not in the decryption mapping, keep it unchanged
			plaintext += char

	return plaintext

ciphertext = "GDKKN OXSGNMHRSC!"
key = "CBACDEFGHIJKLMNOPQRSTUVWXYZ"  # Key based on permutation [C, B, A]
alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

decrypted_text = SSC_decryption(ciphertext, key, alphabet)
print("Decrypted plaintext:", plaintext)

## Task #3: Collect statistics of ciphertext ##

# alphabet counter
def alphabet_counter(text_string):
	alphabet_seq = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	# result array
	alphabet_freq= [0]*26

	# Iterate through each character in the text string
	for char in text_string:
		# Convert the character to uppercase (assuming case-insensitive counting)
		char_upper = char.upper()

		# determine if the character is a letter in the English alphabet
		if char_upper in alphabet_seq:
			# Find the index of the character in the alphabet sequence
			index = alphabet_seq.find(char_upper)

			# Increment the frequency count for the corresponding letter
			alphabet_freq[index] += 1


	# hint: 'find' funtion

	return alphabet_freq

text_string = "HELLO PYTHONISTA!"
result = alphabet_counter(text_string)
print("Frequency of each letter in the English alphabet:", result)

### main
# Assume plaintext consists of only upper letters, spaces(' '), and dots('.')
# ' ' (in plaintext) == '.' (in ciphertext)
# '.' (in plaintext) == '..' (in ciphertext)
import random
plaintext1 = "HANBAT NATIONAL UNIVERSITY IS A UNIVERSITY IN DAEJON. THE UNIVERSITY IS COMPOSED OF SIX COLLEGES WITH DIFFERENT DEPARTMENTS WITHIN THEM. ALL SIX COLLEGES OFFER STUDY AT THE UNDERGRADUATE AND GRADUATE LEVELS."

# simple substitution cipher key generation (random permutation)
alphabet_list = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
SSC_key_random = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')

# hint: we set seed number to generate the same random number
random.seed(1209)
random.shuffle(SSC_key_random)
print('Permutation: ', SSC_key_random)
print('')



## Task #1 ## 
# week03 practice
# task #1: (with TA) SSC encryption function
# You should get the same ciphtertext with the same key (hint: use random seed)
def SSC_encryption(plaintext, key, alphabet):
  ciphertext = ''
  encryption_dict = {alphabet[i]: key[i] for i in range(len(alphabet))}

  for char in plaintext:
    if char in encryption_dict:
      ciphertext += encryption_dict[char]
    elif char == ' ':
      ciphertext += '.'
    elif char == '.':
      ciphertext += '..'
    else:
      ciphertext += char

  return ciphertext
plaintext1 = "HANBAT NATIONAL UNIVERSITY IS A UNIVERSITY IN DAEJON. THE UNIVERSITY IS COMPOSED OF SIX COLLEGES WITH DIFFERENT DEPARTMENTS WITHIN THEM. ALL SIX COLLEGES OFFER STUDY AT THE UNDERGRADUATE AND GRADUATE LEVELS."
ciphertext1_SSC = SSC_encryption(plaintext1, SSC_key_random, alphabet_list)
print('Ciphertext1: ', ciphertext1_SSC)

## Task 2 ##
# task #2: (by yourself)(check with TA) SSC decryption function
# hint: reverse key mapping
def SSC_decryption(ciphertext, key, alphabet):
    decrypted_text = ''
    decryption_dict = {key[i]: alphabet[i] for i in range(len(key))}
    i = 0
    while i < len(ciphertext):
      if ciphertext[i] == '.':
        if i < len(ciphertext) - 1 and ciphertext[i + 1] == '.':
          decrypted_text += '.'
          i += 2
        else:
          decrypted_text += ' '
          i += 1
      elif ciphertext[i] in decryption_dict:
        decrypted_text += decryption_dict[ciphertext[i]]
        i += 1
      else:
        decrypted_text += ciphertext[i]
        i += 1

    return decrypted_text




# Assuming ciphertext1_SSC is defined elsewhere in your code
ciphertext1_SSC = "GUDVUE.DUEIFDUZ.WDIOTBQIEA.IQ.U.WDIOTBQIEA.ID.YUTCFD...EGT.WDIOTBQIEA.IQ.NFPMFQTY.FS.QIJ.NFZZTHTQ.KIEG.YISSTBTDE.YTMUBEPTDEQ.KIEGID.EGTP...UZZ.QIJ.NFZZTHTQ.FSSTB.QEWYA.UE.EGT.WDYTBHBUYWUET.UDY.HBUYWUET.ZTOTZQ.."

decrypted_text1 = SSC_decryption(ciphertext1_SSC, SSC_key_random, alphabet_list)
print('Decryption1: ', decrypted_text1)

## Task 3 ##
# task #3: (by yourself)(check with TA) alphabet letter counting function
# We will use this function for frequency analysis to break permutation based SSC

alphabet_list = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
def alphabet_counter(text):
  # a dictionary to store letter frequencies
  letter_count = {char: 0 for char in alphabet_list}
  for char in text:
    if char in alphabet_list:
      letter_count[char] += 1
  return [letter_count[char] for char in alphabet_list]

ciphertext1_SSC = "GUDVUE.DUEIFDUZ.WDIOTBQIEA.IQ.U.WDIOTBQIEA.ID.YUTCFD...EGT.WDIOTBQIEA.IQ.NFPMFQTY.FS.QIJ.NFZZTHTQ.KIEG.YISSTBTDE.YTMUBEPTDEQ.KIEGID.EGTP...UZZ.QIJ.NFZZTHTQ.FSSTB.QEWYA.UE.EGT.WDYTBHBUYWUET.UDY.HBUYWUET.ZTOTZQ.."

freq_result = alphabet_counter(ciphertext1_SSC)

freq_analysis = dict(zip(alphabet_list, freq_result))
print('Alphabet letter counting result: ', freq_analysis)

from collections import Counter

def frequency_analysis(ciphertext):
  """
  Calculates character frequencies in the given ciphertext.

  Args:
      ciphertext: The string containing the ciphertext.

  Returns:
      A dictionary mapping characters to their frequencies.
  """
  char_counts = Counter(ciphertext.upper())  # Count occurrences, converting to uppercase
  total_chars = sum(char_counts.values())
  frequencies = {char: count / total_chars for char, count in char_counts.items()}
  return frequencies

# Example usage
ciphertext = "IQM.MXTNRZ.RZUQTXM.TK.Z.UTGQME.JMCTUM.JMCMPYGMJ.ZXJ.VKMJ.TX.IQM.MZEPD.IY.RTJ.ILMXITMIQ.UMXIVED.IY.GEYIMUI.RZTXPD.RTPTIZED.UYRRVXTUZITYX..TI.LZK.MRGPYDMJ.MWIMXKTCMPD.AD.XZOT.NMERZXD.JVETXN.LYEPJ.LZE.ILY.TX.ZPP.AEZXUQMK.YB.IQM.NMERZX.RTPTIZED..IQM.MXTNRZ.RZUQTXM.LZK.UYXKTJMEMJ.KY.KMUVEM.IQZI.TI.LZK.VKMJ.IY.MXUYJM.IQM.RYKI.IYG.KMUEMI.RMKKZNMK."

char_freqs = frequency_analysis(ciphertext)

# Print most frequent characters (consider adjusting the number)
print("Most frequent characters (top 10):")
for char, freq in sorted(char_freqs.items(), key=lambda item: item[1], reverse=True)[:10]:
  print(f"{char}: {freq:.2%}")

# You can further analyze these frequencies to make educated guesses about letter replacements for decryption (without actually decrypting).

# assignment #03: SSC decryption with key
ciphertext_assignment = "IQM.MXTNRZ.RZUQTXM.TK.Z.UTGQME.JMCTUM.JMCMPYGMJ.ZXJ.VKMJ.TX.IQM.MZEPD.IY.RTJ.ILMXITMIQ.UMXIVED.IY.GEYIMUI.RZTXPD.RTPTIZED.UYRRVXTUZITYX..TI.LZK.MRGPYDMJ.MWIMXKTCMPD.AD.XZOT.NMERZXD.JVETXN.LYEPJ.LZE.ILY.TX.ZPP.AEZXUQMK.YB.IQM.NMERZX.RTPTIZED..IQM.MXTNRZ.RZUQTXM.LZK.UYXKTJMEMJ.KY.KMUVEM.IQZI.TI.LZK.VKMJ.IY.MXUYJM.IQM.RYKI.IYG.KMUEMI.RMKKZNMK."

# We will give you an hint
# hint: only for plaintext in assignment
# missing letters: E, I, K, M, T, X, Y, Z
#key_candidate = list('0AUJ0BNQ0HFPR00GS000VCLWDO') - based on the frequency analysis the key candidate is arranged to include the missing letters
#alphabet_list = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
key_candidate = list('ZAUJMBNQTHFPRXYGSEKIVCLWDO')

decrypted_text1 = SSC_decryption(ciphertext_assignment, key_candidate, alphabet_list)
print('Decryption trial: ', decrypted_text1)
print('')